name: Agent
run-name: Agent(${{ inputs.AGENT_AZURE_MODEL_NAME }}) ${{ inputs.WOPEE_PROJECT_URL }} ${{ inputs.WOPEE_USER_PROMPT }}

on:
  repository_dispatch:
    types: [agent, crawl]
  workflow_dispatch:
    inputs:
      WOPEE_USER_PROMPT:
        description: "WOPEE_USER_PROMPT"
        default: "Proceed with E2E purchase flow."
        required: true

jobs:
  test:
    runs-on: self-hosted
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WOPEE_API_KEY: ${{ secrets.WOPEE_API_KEY }}
      WOPEE_API_URL: ${{ vars.WOPEE_API_URL || 'https://api.wopee.io' }}
      WOPEE_PROJECT_UUID: ${{ vars.WOPEE_PROJECT_UUID }}
      WOPEE_PROJECT_URL: ${{ vars.WOPEE_PROJECT_URL || 'https://dronjo.wopee.io' }}
      WOPEE_SCREENSHOT_VALIDATION_ENABLED: "true"
      WOPEE_BRANCH_NAME: master
      WOPEE_CI_BUILD_ID: build-123
      WOPEE_CUSTOM_TAGS: custom-tag
      WOPEE_ENABLE_SOFT_ASSERT: "true"
      WOPEE_PIXEL_TO_PIXEL_DIFF_TOLERANCE: "0.1"
      WOPEE_COLLECT_PAGE_CONTENT: "true"

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          npm install --prefer-offline --no-audit
          npx playwright install ffmpeg

      - name: Set WOPEE_SUITE_NAME
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.suite.name != null
        run: |
          echo 'WOPEE_SUITE_NAME=${{ github.event.client_payload.suite.name }}' >> $GITHUB_ENV

      - name: Set WOPEE_SUITE_UUID
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.suite.uuid != null
        run: |
          echo 'WOPEE_SUITE_UUID=${{ github.event.client_payload.suite.uuid }}' >> $GITHUB_ENV

      - name: Set WOPEE_TEST_USERNAME
        if: github.event.client_payload.suite_analysis_config != null && github.event.client_payload.suite_analysis_config.username != null
        run: export WOPEE_TEST_USERNAME="${{ github.event.client_payload.suite_analysis_config.username }}"

      - name: Set WOPEE_TEST_PASSWORD
        if: github.event.client_payload.suite_analysis_config != null && github.event.client_payload.suite_analysis_config.password != null
        run: export WOPEE_TEST_PASSWORD="${{ github.event.client_payload.suite_analysis_config.password }}"

      - name: Set WOPEE_COOKIE_PREFERENCE # ACCEPT_ALL | DECLINE_ALL | IGNORE
        if: github.event.client_payload.suite_analysis_config != null && github.event.client_payload.suite_analysis_config.cookiePreference != null
        run: export WOPEE_COOKIE_PREFERENCE="${{ github.event.client_payload.suite_analysis_config.cookiePreference }}"

      - name: Set WOPEE_USER_PROMPT # (priority: input > suite_analysis_config > test_case)
        run: |
          # 1. From workflow_dispatch input if set
          if [ ! -z "${{ inputs.WOPEE_USER_PROMPT }}" ]; then
            echo "WOPEE_USER_PROMPT=${{ inputs.WOPEE_USER_PROMPT }}" >> $GITHUB_ENV
            exit 0
          fi

          # 2. From suite_analysis_config.additionalInstructions
          if [ ! -z "${{ github.event.client_payload.suite_analysis_config.additionalInstructions }}" ]; then
            CLEANED_PROMPT=$(echo "${{ github.event.client_payload.suite_analysis_config.additionalInstructions }}" | tr '\n' ' ' | tr -s ' ')
            echo "WOPEE_USER_PROMPT=$CLEANED_PROMPT" >> $GITHUB_ENV
            exit 0
          fi

          # 3. From test_case if present
          if [ ! -z "${{ github.event.client_payload.test_case }}" ]; then
            echo "WOPEE_USER_PROMPT=$(echo '${{ github.event.client_payload.test_case }}' | base64 --decode)" >> $GITHUB_ENV
            exit 0
          fi

      - run: wopee_agent

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            /tmp/test-results
            /tmp/playwright-report
          retention-days: 3

      - name: Confirm end of run
        run: |
          curl --request POST \
            --header 'content-type: application/json' \
            --header 'api_key: ${{ secrets.WOPEE_API_KEY }}' \
            --url '${{ env.WOPEE_API_URL }}' \
            --data '{"query":"mutation PostProcessAnalysisSuite($input: PostProcessAnalysisSuiteInput!) { postProcessAnalysisSuite(input: $input) }", "variables":{"input":{ "projectUuid":"${{ env.WOPEE_PROJECT_UUID }}", "suiteUuid":"${{ env.WOPEE_SUITE_UUID }}"}}}'
